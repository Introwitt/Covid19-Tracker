{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qWAsBeA,MAlBf,YAAmE,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,MAAUC,EAAS,0DAE9D,OACI,kBAACC,EAAA,EAAD,CAAMC,QAAWF,EAAME,QAASC,UAAS,kBACrCL,GAAU,oBAD2B,YACJD,GAAS,iBAC1C,kBAACO,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYF,UAAY,iBAAiBG,MAAM,iBAC1CX,GAEL,wBAAIQ,UAAS,0BAAsBN,GAAS,0BAA4BD,GACxE,kBAACS,EAAA,EAAD,CAAYF,UAAU,iBAAiBG,MAAM,iBACxCP,EADL,a,sECVVQ,EAAkB,CACpBX,MAAO,CACLY,IAAK,UACLC,IAAK,mBACLC,QAAS,yBACTC,WAAY,KAEdC,UAAW,CACTJ,IAAK,UACLC,IAAK,oBACLC,QAAS,0BACTC,WAAY,MAEdE,OAAQ,CACNL,IAAK,UACLC,IAAK,mBACLC,QAAS,yBACTC,WAAY,MAMLG,EAAW,SAACC,GACrB,IAAMC,EAAU,YAAOD,GAGvB,OADAC,EAAWC,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAEtB,MAAMuB,EAAEvB,OAAQ,EAAI,KACxCoB,GAIEI,EAAkB,SAACC,GAAD,OAC7BA,EAAI,WAAOC,IAAQD,GAAME,OAAO,SAAY,MClB/BC,MAbf,YAAoD,IAAtCC,EAAqC,EAArCA,UAAWC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,OAAQC,EAAO,EAAPA,KACxC,OACI,yBAAKzB,UAAU,OACX,kBAAC,IAAD,CAAYwB,OAAUA,EAAQC,KAAQA,GAClC,kBAACC,EAAA,EAAD,CACAC,IAAI,qDACJC,YAAY,2ED4BC,SAAChB,GAAD,IAAOW,EAAP,uDAAmB,QAAnB,OACzBX,EAAKiB,KAAI,SAAAC,GAAO,OACZ,kBAACC,EAAA,EAAD,CACEP,OAAU,CAACM,EAAQE,YAAYC,IAAKH,EAAQE,YAAYE,MACxDC,YAAe,GACfhC,MAASC,EAAgBmB,GAAWlB,IACpC+B,UAAahC,EAAgBmB,GAAWlB,IACxCgC,OACEC,KAAKC,KAAKT,EAAQP,IAAcnB,EAAgBmB,GAAWf,YAG/D,kBAACgC,EAAA,EAAD,KACE,yBAAKxC,UAAY,kBACjB,yBACAA,UAAY,YACZyC,MAAO,CAAEC,gBAAgB,OAAD,OAASZ,EAAQE,YAAYW,KAA7B,QACxB,yBAAK3C,UAAU,aAAa8B,EAAQA,SACpC,yBAAK9B,UAAU,cAAf,UAAoCmB,IAAQW,EAAQrC,OAAO2B,OAAO,QAClE,yBAAKpB,UAAU,kBAAf,cAA4CmB,IAAQW,EAAQrB,WAAWW,OAAO,QAC9E,yBAAKpB,UAAU,eAAf,WAAsCmB,IAAQW,EAAQpB,QAAQU,OAAO,cC7C9DwB,CAActB,EAAWC,MCI3BsB,MAdf,YAA6B,IAAbvB,EAAY,EAAZA,UACZ,OACI,yBAAKtB,UAAU,SACVsB,EAAUO,KAAI,gBAAEC,EAAF,EAAEA,QAASrC,EAAX,EAAWA,MAAX,OACf,4BACI,4BAAKqC,GACL,4BAAI,gCAASX,IAAQ1B,GAAO2B,OAAO,e,wBCL7C0B,EAAU,CACZC,OAAQ,CACNC,SAAS,GAEXC,SAAU,CACRC,MAAO,CACLb,OAAQ,IAGZc,qBAAqB,EACrBC,SAAU,CACRC,KAAM,QACNC,WAAW,EACXC,UAAW,CACTC,MAAO,SAAUC,EAAa7C,GAC5B,OAAOO,IAAQsC,EAAYC,OAAOtC,OAAO,WAI/CuC,OAAQ,CACNC,MAAO,CACL,CACEC,KAAM,OACNC,KAAM,CACJ1C,OAAQ,WACR2C,cAAe,QAIrBC,MAAO,CACL,CACEC,UAAW,CACTjB,SAAS,GAEXkB,MAAO,CAELC,SAAU,SAAUT,EAAOU,EAAOC,GAChC,OAAOlD,IAAQuC,GAAOtC,OAAO,YAQrCkD,EAAiB,SAAC1D,EAAMW,GAC1B,IACIgD,EADEC,EAAY,GAElB,IAAI,IAAIC,KAAQ7D,EAAKnB,MAAM,CACvB,GAAG8E,EAAc,CACb,IAAMG,EAAe,CACjBC,EAAEF,EACFG,EAAGhE,EAAKW,GAAWkD,GAAQF,GAE/BC,EAAUK,KAAKH,GAEnBH,EAAgB3D,EAAKW,GAAWkD,GAGpC,OAAOD,GA2CIM,MAxCf,YAAoD,IAAD,IAA/BvD,iBAA+B,MAArB,QAAqB,kCACvBwD,mBAAS,KADc,mBACxCnE,EADwC,KAClCoE,EADkC,KAmB/C,OAfAC,qBAAU,YACS,uCAAG,sBAAAlE,EAAA,sEACRmE,MAAM,8DACPC,MAAK,SAACC,GAAc,OAAOA,EAASC,UACpCF,MAAK,SAAAvE,GACF,IAAM4D,EAAYF,EAAe1D,EAAMW,GACvCyD,EAAQR,MALF,2CAAH,qDASfc,KAED,CAAC/D,IAIA,yBAAKvB,UAAU,mBACVY,GAAQA,EAAK2E,OAAS,GACnB,kBAAC,OAAD,CACAzC,QAAWA,EACXlC,KAAM,CACF4E,SAAU,CAAC,CACPC,gBAAiB,yBACjBC,YAAa,UACb9E,KAAMA,S,OC+Cf+E,MAlIf,WAAgB,IAAD,EAEqBZ,mBAAS,IAF9B,mBAENzD,EAFM,KAEKsE,EAFL,OAGiBb,mBAAS,CAAC,cAH3B,mBAGNjD,EAHM,KAGG+D,EAHH,OAIyBd,mBAAS,IAJlC,mBAIN/C,EAJM,KAIO8D,EAJP,OAKqBf,mBAAS,IAL9B,mBAKNgB,EALM,KAKKC,EALL,OAMqBjB,mBAAS,SAN9B,mBAMNxD,EANM,KAMK0E,EANL,OAQblB,mBAAS,CAAE9C,IAAK,SAAUiE,KAAM,UARnB,mBAONC,EAPM,KAOKC,EAPL,OASiBrB,mBAAS,GAT1B,mBASNsB,EATM,KASGC,EATH,OAU2BvB,mBAAS,IAVpC,mBAUNwB,EAVM,KAUQC,EAVR,KAYbvB,qBAAU,WACRC,MAAM,sCACLC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACvE,GACLkF,EAAelF,QAEhB,IAEHqE,qBAAU,YAEc,uCAAG,sBAAAlE,EAAA,sEACjBmE,MAAM,4CACXC,MAAK,SAACC,GAAD,OAAaA,EAASC,UAC3BF,MAAK,SAACvE,GACL,IAAMU,EAAYV,EAAKiB,KAAI,SAACC,GAAD,MACzB,CACE2E,KAAM3E,EAAQA,QACd4B,MAAO5B,EAAQE,YAAY0E,SAGzB7F,EAAaF,EAASC,GAC5BoF,EAAanF,GACb+E,EAAatE,GACbkF,EAAgB5F,MAbK,2CAAH,qDAgBtB+F,KACC,IAEH,IAAMC,EAAe,uCAAG,WAAMC,GAAN,iBAAA9F,EAAA,6DAEhB+F,EAAcD,EAAME,OAAOrD,MACjCmC,EAAWiB,GACLnF,EAAsB,cAAhBmF,EAA8B,qCAA9B,mDAAiHA,GAJvG,SAMhB5B,MAAMvD,GACXwD,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAvE,GACJiF,EAAWiB,GACXhB,EAAelF,GAEfwF,EAAa,CAACxF,EAAKoB,YAAYC,IAAKrB,EAAKoB,YAAYE,OACrDoE,EAAW,MAbS,2CAAH,sDAkBrB,OACE,yBAAKtG,UAAU,OACb,yBAAKA,UAAU,aACX,yBAAKA,UAAU,eACb,iDACA,kBAACgH,EAAA,EAAD,CAAahH,UAAU,iBACrB,kBAACiH,EAAA,EAAD,CACAC,QAAU,WACVC,SAAYP,EACZlD,MAAS5B,GAEP,kBAACsF,EAAA,EAAD,CAAU1D,MAAO,aAAjB,aAEEpC,EAAUO,KAAI,SAACC,GAAD,OACZ,kBAACsF,EAAA,EAAD,CAAU1D,MAAQ5B,EAAQ4B,OAAQ5B,EAAQ2E,YAQtD,yBAAKzG,UAAY,cACf,kBAAC,EAAD,CACEN,OAAK,EACLC,OAAwB,UAAd4B,EACVxB,QAAW,SAACsH,GAAD,OAAOpB,EAAa,UAC/BzG,MAAQ,oBACRC,MAAOwB,EAAgBe,EAAYsF,YACnC1H,MAAQqB,EAAgBe,EAAYvC,SAGtC,kBAAC,EAAD,CACEE,OAAwB,cAAd4B,EACVxB,QAAW,SAACsH,GAAD,OAAOpB,EAAa,cAAkBzG,MAAQ,aACzDC,MAASwB,EAAgBe,EAAYuF,gBAAiB3H,MAAQqB,EAAgBe,EAAYvB,aAG5F,kBAAC,EAAD,CACEf,OAAK,EACLC,OAAwB,WAAd4B,EACVxB,QAAW,SAACsH,GAAD,OAAOpB,EAAa,WAC/BzG,MAAQ,SACRC,MAASwB,EAAgBe,EAAYwF,aAAc5H,MAAQqB,EAAgBe,EAAYtB,WAK3F,kBAAC,EAAD,CACEY,UAAaiF,EACbhF,UAAaA,EACbC,OAAU2E,EACV1E,KAAQ4E,KAIZ,kBAACvG,EAAA,EAAD,CAAME,UAAU,cACd,kBAACC,EAAA,EAAD,KACE,yBAAKD,UAAU,oBACb,qDACA,kBAAC,EAAD,CAAOsB,UAAWyE,IAClB,6CAAmBxE,GACnB,kBAAC,EAAD,CAAWA,UAAWA,SCxHdkG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a828ec3d.chunk.js","sourcesContent":["import React from 'react';\nimport './InfoBox.css';\nimport {Card, CardContent, Typography} from '@material-ui/core'; \n\nfunction InfoBox({title, cases, isRed, active, total, ...props }) {\n    \n    return (\n        <Card onClick = {props.onClick} className = {`infoBox ${\n            active && 'infoBox--selected'} ${isRed && 'infoBox--red'}`}>\n            <CardContent>\n                <Typography className = 'infoBox__title' color=\"textSecondary\">\n                    {title}\n                </Typography>\n                <h2 className= {`infoBox__cases ${!isRed && 'infoBox__cases--green'}`}>{cases}</h2>\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\n                    {total} Total\n                </Typography>\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default InfoBox;\n\n","import React from 'react';\nimport numeral from 'numeral';\nimport {Circle, Popup} from 'react-leaflet';\n\nconst casesTypeColors = {\n    cases: {\n      hex: \"#CC1034\",\n      rgb: \"rgb(204, 16, 52)\",\n      half_op: \"rgba(204, 16, 52, 0.5)\",\n      multiplier: 800,\n    },\n    recovered: {\n      hex: \"#7dd71d\",\n      rgb: \"rgb(125, 215, 29)\",\n      half_op: \"rgba(125, 215, 29, 0.5)\",\n      multiplier: 1200,\n    },\n    deaths: {\n      hex: \"#fb4443\",\n      rgb: \"rgb(251, 68, 67)\",\n      half_op: \"rgba(251, 68, 67, 0.5)\",\n      multiplier: 2000,\n    },\n  };\n  \n\n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n    \n    sortedData.sort((a,b)=> (a.cases>b.cases ?-1 : 1));\n    return sortedData;\n\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\n// Draw circles on the map with interactive tooltip\nexport const showDataOnMap = (data, casesType = 'cases') => (\n    data.map(country => (\n        <Circle\n          center = {[country.countryInfo.lat, country.countryInfo.long]}\n          fillOpacity = {0.4}\n          color = {casesTypeColors[casesType].hex}\n          fillColor = {casesTypeColors[casesType].hex}\n          radius = {\n            Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n          }\n        >\n        <Popup>\n          <div className = \"info-container\">\n          <div\n          className = \"info-flag\"\n          style={{ backgroundImage: `url(${country.countryInfo.flag})` }} />\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-cases\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n          <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n          <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n          </div>\n        </Popup>\n\n        </Circle>\n\n    ))\n) \n\n","import React from 'react';\nimport './Map.css';\nimport {Map as LeafletMap, TileLayer } from 'react-leaflet';\nimport {showDataOnMap} from './util';\n\nfunction Map({countries, casesType, center, zoom}) {\n    return (\n        <div className='map'>\n            <LeafletMap center = {center} zoom = {zoom}>\n                <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n                {showDataOnMap(countries, casesType)}\n            </LeafletMap>\n        </div>\n    )\n}\nexport default Map;\n","import React from 'react';\nimport numeral from 'numeral';\n\nfunction Table({countries}) {\n    return (\n        <div className='table'>\n            {countries.map(({country, cases}) =>(\n            <tr>\n                <td>{country}</td>\n                <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\n            </tr>\n\n            ))}\n        </div>\n    )\n}\n\nexport default Table\n","import React, {useState, useEffect} from 'react';\nimport {Line} from 'react-chartjs-2';\nimport numeral from 'numeral';\n\nconst options = {\n    legend: {\n      display: false,\n    },\n    elements: {\n      point: {\n        radius: 0,\n      },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n      callbacks: {\n        label: function (tooltipItem, data) {\n          return numeral(tooltipItem.value).format(\"+0,0\");\n        },\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          type: \"time\",\n          time: {\n            format: \"MM/DD/YY\",\n            tooltipFormat: \"ll\",\n          },\n        },\n      ],\n      yAxes: [\n        {\n          gridLines: {\n            display: false,\n          },\n          ticks: {\n            // Include a dollar sign in the ticks\n            callback: function (value, index, values) {\n              return numeral(value).format(\"0a\");\n            },\n          },\n        },\n      ],\n    },\n};\n\nconst buildChartData = (data, casesType) =>{\n    const chartData = [];\n    let lastDataPoint;\n    for(let date in data.cases){\n        if(lastDataPoint){\n            const newDataPoint = {\n                x:date,\n                y: data[casesType][date] - lastDataPoint\n            }\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[casesType][date];\n    }\n\n    return chartData;\n}\n\nfunction LineGraph({casesType='cases' , ...props}) {\n    const [data, setData] = useState({});\n\n    \n    useEffect(() => {\n        const fetchData = async () => {\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n                .then((response) =>{ return response.json()})\n                .then(data =>{\n                    const chartData = buildChartData(data, casesType);\n                    setData(chartData);\n                });\n        };\n\n        fetchData();\n        \n    }, [casesType])\n\n    \n    return (\n        <div className='props.className'>\n            {data && data.length > 0 && (\n                <Line\n                options = {options}\n                data={{\n                    datasets: [{\n                        backgroundColor: 'rgba(204, 16, 52, 0.5)',\n                        borderColor: '##C1034',\n                        data: data\n                    }]\n                }}\n            \n             />\n            \n            )}\n            \n        </div>\n    )\n}\n\nexport default LineGraph;\n","import React, {useState, useEffect} from 'react';\nimport {Card, CardContent, FormControl, MenuItem, Select} from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport './App.css';\nimport './Table.css'\nimport { sortData, prettyPrintStat } from './util';\nimport LineGraph from './LineGraph';\nimport 'leaflet/dist/leaflet.css';\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(['worldwide']);\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState('cases');\n  const [mapCenter, setMapCenter] = \n  useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n\n  useEffect(() =>{\n    fetch('https://disease.sh/v3/covid-19/all')\n    .then((response) => response.json())\n    .then((data) => {\n      setCountryInfo(data);\n    })\n  }, [])\n\n  useEffect(()=>{\n\n    const getCountriesData = async()=>{\n      await fetch('https://disease.sh/v3/covid-19/countries')\n      .then((response)=> response.json())\n      .then((data)=> {\n        const countries = data.map((country) => (\n          {\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }\n        ))\n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setCountries(countries);\n        setMapCountries(data);\n      })\n    }\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async(event) => {\n  \n    const countryCode = event.target.value;\n    setCountry(countryCode);\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long])\n      setMapZoom(4);\n    })\n\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n          <div className='app__header'>\n            <h1> COVID19 TRACKER </h1>\n            <FormControl className=\"app__dropdown\">\n              <Select\n              variant = \"outlined\"\n              onChange = {onCountryChange}\n              value = {country}\n              >\n                <MenuItem value =\"worldwide\">Worldwide</MenuItem>\n                {\n                  countries.map((country) => (\n                    <MenuItem value ={country.value}>{country.name}</MenuItem>\n                  ))\n                }\n              \n              </Select>\n            </FormControl>\n          </div>\n      \n        <div className = \"app__stats\">\n          <InfoBox\n            isRed\n            active = {casesType === 'cases'}\n            onClick = {(e) => setCasesType('cases')} \n            title = 'Coronavirus Cases'\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total ={prettyPrintStat(countryInfo.cases)}\n         />\n\n          <InfoBox \n            active = {casesType === 'recovered'}\n            onClick = {(e) => setCasesType('recovered')}     title = 'Recoveries' \n            cases = {prettyPrintStat(countryInfo.todayRecovered)} total ={prettyPrintStat(countryInfo.recovered)} \n          />\n\n          <InfoBox\n            isRed\n            active = {casesType === 'deaths'}\n            onClick = {(e) => setCasesType('deaths')}       \n            title = 'Deaths'\n            cases = {prettyPrintStat(countryInfo.todayDeaths)} total ={prettyPrintStat(countryInfo.deaths)} \n          />\n        \n        </div>\n\n        <Map\n          countries = {mapCountries}\n          casesType = {casesType}\n          center = {mapCenter}\n          zoom = {mapZoom}\n         />\n      </div>\n          \n      <Card className=\"app__right\">\n        <CardContent>\n          <div className=\"app__information\">\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3>Worldwide new {casesType}</h3>\n            <LineGraph casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}